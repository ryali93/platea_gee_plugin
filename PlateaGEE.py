# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlateaGEE
                                 A QGIS plugin
 PlateaGIS_ndvi_ndmi
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ryali93/tidop
        email                : roy.yali@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# from PyQt5 import QtWebEngineWidgets  # Esto debe estar al principio
from qgis.gui import QgsMapToolEmitPoint
from qgis.core import QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsProject, QgsRasterLayer
from qgis.core import QgsVectorLayer, QgsFeature, QgsGeometry
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDate
from qgis.PyQt.QtWidgets import QAction, QLineEdit, QMessageBox, QVBoxLayout, QSlider

import requests
import tempfile
import os.path

from .resources import *
from .PlateaGEE_dialog import PlateaGEEDialog
from .ee_utils import *
from .utils import *

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

class PlateaGEE:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PlateaGEE_{}.qm'.format(locale))

        # self.creds = get_credentials("https://ryali93.users.earthengine.app/view/plateaapi") # "https://ryali93.users.earthengine.app/view/plateaapi"

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PlateaGEE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Define a rectangle layer to be used for the selection
        self.rectangle_layer_serie = None
        self.rectangle_layer_flood = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PlateaGEE', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/PlateaGEE/icons/satellite_64.png'
        self.add_action(
            icon_path,
            text=self.tr(u'PlateaGEE'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.dockwidget = PlateaGEEDialog()
        # Connect the input fields with the attributes of the plugin instance
        self.dockwidget.lon_input = self.dockwidget.findChild(QLineEdit, 'lon_input')
        self.dockwidget.lat_input = self.dockwidget.findChild(QLineEdit, 'lat_input')
        self.dockwidget.start_date_input = self.dockwidget.findChild(QLineEdit, 'start_date_input')
        self.dockwidget.end_date_input = self.dockwidget.findChild(QLineEdit, 'end_date_input')

        # Set the current date and end date
        current_date = QDate.currentDate()
        start_date = current_date.addDays(-50)
        self.dockwidget.end_date_edit_series.setDate(current_date)
        self.dockwidget.start_date_edit_series.setDate(start_date)

        self.dockwidget.end_date_edit_flood.setDate(current_date)
        self.dockwidget.start_date_edit_flood.setDate(start_date)

        # Set the range of the spin boxes
        self.dockwidget.date_edit_planet.setRange(0, 23)
        self.dockwidget.date_edit_planet.setValue(22)
        self.dockwidget.date_label_planet.setText(f"Mes: {self.get_date_from_value(22)}")

        self.dockwidget.date_edit_planet.setTickPosition(QSlider.TickPosition.TicksBelow)

        # Set the date display format
        date_display_format = "dd/MM/yyyy"
        self.dockwidget.start_date_edit_series.setDisplayFormat(date_display_format) # series
        self.dockwidget.end_date_edit_series.setDisplayFormat(date_display_format) # series

        self.dockwidget.end_date_edit_flood.setDisplayFormat(date_display_format) # flood
        self.dockwidget.start_date_edit_flood.setDisplayFormat(date_display_format) # flood

        # Connect the accepted signal of the button_box with the on_button_box_accepted method
        self.dockwidget.ok_button.clicked.connect(self.on_ok_button_clicked)

        # Connect the clicked signal of the button with the on_select_point_button_clicked method
        self.dockwidget.select_point_button.clicked.connect(self.on_select_point_button_clicked)

        # Connect the rectangle series button with the on_select_rectangle_series_button_clicked method
        self.dockwidget.select_rectangle_series_button.clicked.connect(self.on_select_rectangle_series_button_clicked)

        # Connect the rectangle flood button with the on_select_rectangle_flood_button_clicked method
        self.dockwidget.select_rectangle_flood_button.clicked.connect(self.on_select_rectangle_flood_button_clicked)

        # 
        self.dockwidget.date_edit_planet.valueChanged.connect(self.update_date_label)
        self.dockwidget.planetwmts_button.clicked.connect(self.on_planetxyz_button_clicked)

    def update_date_label(self, value):
        self.dockwidget.date_label_planet.setText(f"Mes: {self.get_date_from_value(value)}")
    
    def get_date_from_value(self, value):
        from dateutil.relativedelta import relativedelta
        current_date = datetime.now()
        date_from_slider = current_date - relativedelta(months=23-value)
        return date_from_slider.strftime('%Y-%m')

    def on_planetxyz_button_clicked(self):
        """Load Planet XYZ layer"""
        date_planet = self.dockwidget.date_label_planet.text().split(": ")[1]
        date_planet = date_planet.replace("-", "_")
        api_key = "PLAKabb0ed6e8a964c6591391d8e8bfa0980"
        uri = "type=xyz&url=https://tiles.planet.com/basemaps/v1/planet-tiles/global_monthly_" + date_planet + "_mosaic/gmap/{z}/{x}/{y}.png?api_key=" + api_key + "&ua=qgis-3.22.16-Białowieża;planet-explorer2.3.0&zmin=0&zmax=22"
        rlayer = QgsRasterLayer(uri, "Global Monthly " + date_planet, "wms")
        if not rlayer.isValid():
            print("Layer failed to load!")
        else:
            QgsProject.instance().addMapLayer(rlayer)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PlateaGEE'),
                action)
            self.iface.removeToolBarIcon(action)

    def clear_layout(self, layout):
        """Remove all widgets from the layout"""
        if layout is not None:
            while layout.count():
                child = layout.takeAt(0)
                widget = child.widget()
                if widget:
                    widget.deleteLater()
    
    def create_plot(self, data):
        fig = create_plot_series(data)
    
        # Crear un FigureCanvasQTAgg para mostrar el gráfico de Matplotlib en el plugin
        plot_canvas = FigureCanvas(fig)

        # Si ya existe un layout, elimínalo
        layout = self.dockwidget.plot_widget.layout()
        if layout is None:
            layout = QVBoxLayout(self.dockwidget.plot_widget)
            self.dockwidget.plot_widget.setLayout(layout)
        else:
            self.clear_layout(layout)
        
        # Crea un nuevo layout y añade el gráfico
        layout.addWidget(plot_canvas)
        print("Plot added to layout")
    

    def loadKml(self, url):
        # Realizar la petición GET para descargar el archivo
        response = requests.get(url)

        # Comprobar que la petición ha sido exitosa
        if response.status_code == 200:
            # Crear un archivo temporal para guardar los datos
            with tempfile.NamedTemporaryFile(delete=False, suffix='.kml') as tmpfile:
                # Guardar los datos en el archivo
                tmpfile.write(response.content)

                # Crear una nueva capa vectorial a partir del archivo kml descargado
                vlayer = QgsVectorLayer(tmpfile.name, "flood_vector", "ogr")

                if not vlayer.isValid():
                    print("Capa falló al cargar!")
                else:
                    # Añadir esta capa al mapa
                    QgsProject.instance().addMapLayer(vlayer)
        else:
            print("La descarga del archivo KML falló!")
    

    def on_ok_button_clicked(self):
        # Read the coordinates and dates from the fields in the form
        lon_text = self.dockwidget.lon_input.text()
        lat_text = self.dockwidget.lat_input.text()

        start_date = self.dockwidget.start_date_edit_series.date().toString("yyyy-MM-dd")
        end_date = self.dockwidget.end_date_edit_series.date().toString("yyyy-MM-dd")

        lon = float(lon_text)
        lat = float(lat_text)

        data = create_query_ndvi_ndmi_point(lon, lat, start_date, end_date)
        data = data_to_json(data)
        
        self.create_plot(data)
    
    def on_polygon_flood_button_clicked(self, layer):
        # Get the temporal layer
        start_date = self.dockwidget.start_date_edit_flood.date().toString("yyyy-MM-dd")
        end_date = self.dockwidget.end_date_edit_flood.date().toString("yyyy-MM-dd")

        # Extract the coordinates of the rectangle
        lon_min = layer.extent().xMinimum()
        lat_min = layer.extent().yMinimum()
        lon_max = layer.extent().xMaximum()
        lat_max = layer.extent().yMaximum()

        url = create_query_flood(lon_min, lat_min, lon_max, lat_max, start_date, end_date)
        print(url)

        self.loadKml(url)

    def on_polygon_serie_button_clicked(self, layer):
        """Create a plot with the NDVI or NDMI values of the selected polygon"""
        # Get the temporal layer
        start_date = self.dockwidget.start_date_edit_series.date().toString("yyyy-MM-dd")
        end_date = self.dockwidget.end_date_edit_series.date().toString("yyyy-MM-dd")

        # Extract the coordinates of the rectangle
        lon_min = layer.extent().xMinimum()
        lat_min = layer.extent().yMinimum()
        lon_max = layer.extent().xMaximum()
        lat_max = layer.extent().yMaximum()
        
        data = create_query_ndvi_ndmi_polygon(lon_min, lat_min, lon_max, lat_max, start_date, end_date)
        data = data_to_json(data)

        self.create_plot(data)

    def transform_rectangle(self, rectangle):
        """Transforms the rectangle from the canvas CRS to EPSG:4326"""
        source_crs = QgsProject.instance().crs()
        # source_crs = QgsCoordinateReferenceSystem(25830)
        dest_crs = QgsCoordinateReferenceSystem(4326)
        transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
        rectangle = transform.transformBoundingBox(rectangle)
        return rectangle
        

    def on_rectangle_flood_selected(self, rectangle):
        """Creates a rectangle layer and calls the on_polygon_flood_button_clicked method"""
        rectangle = self.transform_rectangle(rectangle)
        if self.rectangle_layer_flood is not None:
            QgsProject.instance().removeMapLayer(self.rectangle_layer_flood)
        layer = QgsVectorLayer('Polygon?crs=epsg:4326', 'selected_area_flood', 'memory')
        layer.setOpacity(0.5)
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromRect(rectangle))
        layer.dataProvider().addFeatures([feature])
        QgsProject.instance().addMapLayer(layer)
        self.rectangle_layer_flood = layer
        self.on_polygon_flood_button_clicked(layer=layer)
        self.iface.mapCanvas().unsetMapTool(self.rectangle_tool)

    def on_select_rectangle_flood_button_clicked(self):
        """Creates a rectangle map tool and connects the rectangleSelected signal to the on_rectangle_flood_selected method"""
        self.rectangle_tool = RectangleMapTool(self.iface.mapCanvas())
        self.rectangle_tool.rectangleSelected.connect(self.on_rectangle_flood_selected)
        self.iface.mapCanvas().setMapTool(self.rectangle_tool)

    def on_select_rectangle_series_button_clicked(self):
        """Creates a rectangle map tool and connects the rectangleSelected signal to the on_rectangle_series_selected method"""
        self.rectangle_tool = RectangleMapTool(self.iface.mapCanvas()) # Crear la herramienta de selección de rectángulo
        self.rectangle_tool.rectangleSelected.connect(self.on_rectangle_series_selected) # Conectar la señal rectangleSelected a una función que maneje el rectángulo seleccionado
        self.iface.mapCanvas().setMapTool(self.rectangle_tool) # Activar la herramienta de selección de rectángulo

    def on_rectangle_series_selected(self, rectangle):
        """Creates a rectangle layer and calls the on_polygon_serie_button_clicked method"""
        rectangle = self.transform_rectangle(rectangle)
        if self.rectangle_layer_flood is not None:
            QgsProject.instance().removeMapLayer(self.rectangle_layer_flood)
        layer = QgsVectorLayer('Polygon?crs=epsg:4326', 'selected_area_serie', 'memory')
        layer.setOpacity(0.5)
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromRect(rectangle))
        layer.dataProvider().addFeatures([feature])
        QgsProject.instance().addMapLayer(layer)
        self.rectangle_layer_flood = layer
        self.on_polygon_serie_button_clicked(layer=layer)
        self.iface.mapCanvas().unsetMapTool(self.rectangle_tool)

    def canvasClicked(self, point):
        """Transforms the point from the canvas CRS to EPSG:4326 and sets the coordinates in the inputs"""
        # source_crs = QgsCoordinateReferenceSystem("EPSG:25830")
        source_crs = QgsProject.instance().crs()
        dest_crs = QgsCoordinateReferenceSystem("EPSG:4326")
        transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
        transformed_point = transform.transform(point)
        self.dockwidget.lon_input.setText(str(round(transformed_point.x(), 4)))
        self.dockwidget.lat_input.setText(str(round(transformed_point.y(), 4)))
        self.iface.mapCanvas().unsetMapTool(self.select_point_tool)
    
    def on_select_point_button_clicked(self):
        """Creates a point map tool and connects the canvasClicked signal to the canvasClicked method"""
        self.select_point_tool = QgsMapToolEmitPoint(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.select_point_tool)
        self.select_point_tool.canvasClicked.connect(self.canvasClicked)

    def run(self):
        """Run method that performs all the real work"""
        self.dockwidget.show()
