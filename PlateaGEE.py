# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlateaGEE
                                 A QGIS plugin
 PlateaGIS_ndvi_ndmi
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ryali93/tidop
        email                : roy.yali@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.gui import QgsMapToolEmitPoint
from qgis.core import QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsProject
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDate, QUrl
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QLineEdit, QMessageBox, QPushButton
import plotly.graph_objs as go
# from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWebKitWidgets import QWebView

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .PlateaGEE_dialog import PlateaGEEDialog
import os.path

import json
import requests

class PlateaGEE:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PlateaGEE_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PlateaGEE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PlateaGEE', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/PlateaGEE/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'PlateaGEE'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.dockwidget = PlateaGEEDialog()
        # Conectar los campos de entrada con los atributos de la instancia del complemento
        self.dockwidget.lon_input = self.dockwidget.findChild(QLineEdit, 'lon_input')
        self.dockwidget.lat_input = self.dockwidget.findChild(QLineEdit, 'lat_input')
        self.dockwidget.start_date_input = self.dockwidget.findChild(QLineEdit, 'start_date_input')
        self.dockwidget.end_date_input = self.dockwidget.findChild(QLineEdit, 'end_date_input')

        # Establecer la fecha de inicio y fin
        current_date = QDate.currentDate()
        start_date = current_date.addDays(-10)
        self.dockwidget.end_date_edit.setDate(current_date)
        self.dockwidget.start_date_edit.setDate(start_date)

         # Establecer el formato de visualización de las fechas
        date_display_format = "dd/MM/yyyy"
        self.dockwidget.start_date_edit.setDisplayFormat(date_display_format)
        self.dockwidget.end_date_edit.setDisplayFormat(date_display_format)

        # Conectar la señal accepted del button_box con el método on_button_box_accepted
        self.dockwidget.ok_button.clicked.connect(self.on_ok_button_clicked)
        self.dockwidget.back_button.clicked.connect(self.on_back_button_clicked)

        # self.dockwidget.select_point_button = self.dockwidget.findChild(QPushButton, 'select_point_button')
        self.dockwidget.select_point_button.clicked.connect(self.on_select_point_button_clicked)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PlateaGEE'),
                action)
            self.iface.removeToolBarIcon(action)

    def create_plot(self, data):
            # Extraer las listas de tiempo, NDVI y NDMI
            time = [entry['time'] for entry in data]
            ndvi = [entry['NDVI'] for entry in data]
            ndmi = [entry['NDMI'] for entry in data]

            # Crear el gráfico con Plotly
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=time, y=ndvi, mode='lines+markers', name='NDVI'))
            fig.add_trace(go.Scatter(x=time, y=ndmi, mode='lines+markers', name='NDMI'))
            fig.update_layout(title='NDVI y NDMI a lo largo del tiempo', xaxis_title='Tiempo', yaxis_title='Valores')

            # Convertir el gráfico de Plotly en una página HTML
            plot_html = fig.to_html(full_html=False)

            # Crear un QWebView para mostrar el gráfico de Plotly en el plugin
            plot_view = QWebView(self.dockwidget.plot_widget)
            plot_view.setHtml(plot_html)
            plot_view.setGeometry(0, 0, self.dockwidget.plot_widget.geometry().width(), self.dockwidget.plot_widget.geometry().height())
            plot_view.show()


    def on_ok_button_clicked(self):
        # Leemos las coordenadas y fechas desde los campos en el formulario
        lon_text = self.dockwidget.lon_input.text()
        lat_text = self.dockwidget.lat_input.text()

        start_date = self.dockwidget.start_date_edit.date().toString("yyyy-MM-dd")
        end_date = self.dockwidget.end_date_edit.date().toString("yyyy-MM-dd")

        if not lon_text or not lat_text:
            QMessageBox.critical(None, "Error", "Por favor, ingrese valores de longitud y latitud.")
            return

        lon = float(lon_text)
        lat = float(lat_text)

        # URL de la API (reemplaza con la dirección de tu API)
        url = f"http://localhost:5000/get_ndvi_ndmi_series?lon={lon}&lat={lat}&start_date={start_date}&end_date={end_date}"

        # Enviamos la solicitud a la API y obtenemos la respuesta
        response = requests.get(url)
        if response.status_code == 200:
            data = json.loads(response.text)
            # Muestra los resultados en un cuadro de mensaje
            msg = QMessageBox()
            msg.setWindowTitle("Resultados")
            msg.setText(json.dumps(data, indent=2))
            msg.exec_()
        else:
            # Muestra un mensaje de error si algo sale mal
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowTitle("Error")
            msg.setText(f"Error al obtener datos de la API: {response.status_code}")
            msg.exec_()
        
        self.create_plot(data)

        # Ocultar campos de entrada y mostrar el gráfico
        self.dockwidget.lon_label.hide()
        self.dockwidget.lat_label.hide()
        self.dockwidget.start_date_label.hide()
        self.dockwidget.end_date_label.hide()
        self.dockwidget.lon_input.hide()
        self.dockwidget.lat_input.hide()
        self.dockwidget.start_date_edit.hide()
        self.dockwidget.end_date_edit.hide()
        self.dockwidget.ok_button.hide()
        self.dockwidget.plot_widget.show()
        self.dockwidget.back_button.show()
    
    def on_back_button_clicked(self):
        self.dockwidget.plot_widget.hide()
        self.dockwidget.lon_label.show()
        self.dockwidget.lat_label.show()
        self.dockwidget.start_date_label.show()
        self.dockwidget.end_date_label.show()
        self.dockwidget.lon_input.show()
        self.dockwidget.lat_input.show()
        self.dockwidget.start_date_edit.show()
        self.dockwidget.end_date_edit.show()
        self.dockwidget.ok_button.show()
    
    def canvasClicked(self, point, button):
        source_crs = QgsCoordinateReferenceSystem("EPSG:25830")
        dest_crs = QgsCoordinateReferenceSystem("EPSG:4326")

        # Crear un objeto QgsCoordinateTransform utilizando los CRS
        transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())

        # Transformar el punto
        transformed_point = transform.transform(point)

        # Establecer las coordenadas transformadas en los campos de entrada
        self.dockwidget.lon_input.setText(str(round(transformed_point.x(), 4)))
        self.dockwidget.lat_input.setText(str(round(transformed_point.y(), 4)))

        # Desactivar la herramienta de selección de puntos
        self.iface.mapCanvas().unsetMapTool(self.select_point_tool)
    
    def on_select_point_button_clicked(self):
        self.select_point_tool = QgsMapToolEmitPoint(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.select_point_tool)
        self.select_point_tool.canvasClicked.connect(self.canvasClicked)

    def run(self):
        self.dockwidget.show()
